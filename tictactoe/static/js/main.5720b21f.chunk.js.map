{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","calculateWinner","lines","length","a","b","c","getScore","winner","includes","getChildStates","xIsNext","result","newSquares","slice","push","minimize","score","min_child","min_move","min_utility","nextStates","utility","maximize","Math","random","max_child","max_move","max_utility","App","state","history","Array","fill","makeMove","setState","concat","move","strategy","that","setTimeout","status","current","handleClick","restart","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5720b21f.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (!this.state.xIsNext || calculateWinner(squares) || history.length > 9 || squares[i]) {\n      return;\n    }\n    this.makeMove(i);\n  }\n  \n  makeMove(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n  \n  componentDidUpdate () {\n    // make an AI move after half a second\n    if (!this.state.xIsNext) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        const move = strategy(squares, this.state.xIsNext);\n        const that = this;\n        setTimeout(function() {that.makeMove(move);}, 700);\n    };\n  }\n  \n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    //console.log(getChildStates(current.squares, this.state.xIsNext));\n    \n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (history.length > 9) { \n      status = \"Game Tied!\";\n    } else if (this.state.xIsNext) {\n      status = 'It\\'s your turn.';\n    } else {\n      status = \"AI is thinking...\"\n    }\n\n    return (\n        <div className=\"game\">\n            <div className=\"game-info\">\n                <h1>{status}</h1>\n                <div className=\"game-row\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                            onClick={(i) => this.handleClick(i)}\n                        />\n                    </div>\n                    <table className=\"player-info\">\n                        <tbody>\n                            <tr>\n                                <td>You :</td>\n                                <td>X</td>\n                            </tr>\n                            <tr>\n                                <td>AI :</td>\n                                <td>O</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <p>\n                    <button onClick = { () => this.restart()}>Restart</button>\n                </p>\n            </div>\n        </div>\n    );\n  }\n  \n  restart(){\n    this.setState({\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      xIsNext: Math.random() > 0.5\n    });\n  }\n                \n}\n\n// ========================================\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// );\n\n// helper functions for calculating computer's move\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction getScore(squares) {\n    // return an array of 2 elements [isGameEnded, score]\n    // isGameEnded indicates if the game has finished\n    // score is 10 if \"X\" wins, -10 if \"O\" wins, and 0 otherwise\n    const winner = calculateWinner(squares);\n    if (winner) {\n        return [true, winner === \"X\" ? 10 : -10];\n    } else if (!squares.includes(null)) {\n        return [true, 0];\n    } else {\n        return [false, 0];\n    }\n}\n\nfunction getChildStates(squares, xIsNext) {\n    let result = [];\n    for (let i = 0; i < 9; i++) {\n        if (squares[i] == null) {\n            let newSquares = squares.slice();\n            newSquares[i] = xIsNext ? \"X\" : \"O\";\n            result.push([newSquares, i]);\n        }\n    }\n    return result;\n}\n\nfunction minimize(squares) {\n    let score = getScore(squares);\n    if (score[0]) {\n        // the game has ended\n        return [null, null, score[1]];\n    }\n    const MAX_UTIL = 100;\n    //const MIN_UTIL = -100;\n    let [min_child, min_move, min_utility] = [null, null, MAX_UTIL];\n    const nextStates = getChildStates(squares, false);\n    for (let i = 0; i < nextStates.length; i++) {\n        let utility = maximize(nextStates[i][0]);\n        if (utility[2] < min_utility || (utility[2] === min_utility && Math.random() > 0.5)) {\n            [min_child, min_move, min_utility] = [nextStates[i][0], nextStates[i][1], utility[2]];\n        }\n    }\n    return [min_child, min_move, min_utility];\n}\n\nfunction maximize(squares) {\n    let score = getScore(squares);\n    if (score[0]) {\n        // the game has ended\n        return [null, null, score[1]];\n    }\n    //const MAX_UTIL = 100;\n    const MIN_UTIL = -100;\n    let [max_child, max_move, max_utility] = [null, null, MIN_UTIL];\n    const nextStates = getChildStates(squares, true);\n    for (let i = 0; i < nextStates.length; i++) {\n        let utility = minimize(nextStates[i][0]);\n        if (utility[2] > max_utility || (utility[2] === max_utility && Math.random() > 0.5)) {\n            [max_child, max_move, max_utility] = [nextStates[i][0], nextStates[i][1], utility[2]];\n        }\n    }\n    return [max_child, max_move, max_utility];\n}\n\nfunction strategy(squares, xIsNext) {\n    return xIsNext ? maximize(squares)[1] : minimize(squares)[1];\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}